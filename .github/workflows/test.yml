name: Run Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    name: Test on Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x, 24.x]

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install FFmpeg
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends ffmpeg

      - name: Verify FFmpeg installation
        run: ffmpeg -version

      - name: Run tests
        run: npm run test

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "24.x"

      - name: Check JavaScript syntax
        run: |
          # Basic syntax check using Node.js
          find src test -name "*.js" -exec node --check {} \;

  docker-build:
    name: Test Docker Build
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        timeout-minutes: 10
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: paulgalow/racoder:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test single-stream mode using enviroment variables
        timeout-minutes: 10
        run: |
          LOCAL_PORT=3000

          docker run -d \
            --rm \
            --name racoder-single \
            --env INPUT_STREAM="https://example.com/stream.m3u8" \
            --env OUTPUT_PATH="/test" \
            --env BITRATE="128k" \
            --publish $LOCAL_PORT:3000 \
            paulgalow/racoder:test

          # Wait for container to start
          sleep 5

          # Check if container is running
          docker ps | grep racoder-single

          # Test healthcheck endpoint
          curl -f http://localhost:$LOCAL_PORT/healthcheck || exit 1

          # Test that stream endpoint responds (even if FFmpeg fails on example.com)
          curl -I http://localhost:$LOCAL_PORT/test || exit 1

          # Display container logs
          docker logs racoder-single

          # Clean up
          docker stop racoder-single

      - name: Test multi-stream mode using configuration file
        timeout-minutes: 10
        run: |
          LOCAL_PORT=3001

          # Create a test config file
          echo '{
            "streams": [
              {"input": "https://example.com/s1.m3u8", "output": "/s1", "bitrate": "128k"},
              {"input": "https://example.com/s2.m3u8", "output": "/s2", "bitrate": "192k"}
            ]
          }' > test-config.json

          docker run -d \
            --rm \
            --name racoder-multi \
            --env STREAMS_FILE="/config/streams.json" \
            --volume "$(pwd)/test-config.json:/config/streams.json:ro" \
            --publish $LOCAL_PORT:3000 \
            paulgalow/racoder:test

          # Wait for container to start
          sleep 5

          # Check if container is running
          docker ps | grep racoder-multi

          # Test healthcheck endpoint
          curl -f http://localhost:$LOCAL_PORT/healthcheck || exit 1

          # Test that stream endpoints respond (even if FFmpeg fails on example.com)
          curl -I http://localhost:$LOCAL_PORT/s1 || exit 1
          curl -I http://localhost:$LOCAL_PORT/s2 || exit 1

          # Display container logs
          docker logs racoder-multi

          # Clean up
          docker stop racoder-multi